remstart
	 This file is part of PonyCraft - Tainted Skies (prototype)

    PonyCraft - Tainted Skies (prototype) is free software: you can
	 redistribute it and/or modify it under the terms of the
	 GNU General Public License as published by the Free Software
	 Foundation, either version 3 of the License, or (at your option)
	 any later version.

    PonyCraft - Tainted Skies (prototype) is distributed in the hope
	 that it will be useful, but WITHOUT ANY WARRANTY; without even
	 the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
	 PURPOSE.  See the GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with PonyCraft - Tainted Skies (prototype). If not, see
	 <http://www.gnu.org/licenses/>.
remend

function _ScriptCompileEntryLogging( slot , lin )
	
	rem local variables
	local n as integer
	local s as integer
	local r as integer
	
	rem ---------------------------------------------------------------------------
	rem logging
	rem ---------------------------------------------------------------------------
	
	if ConsoleCmd$(0) = "turnallloggingon"
		Script( slot , lin ).cmd = CMD_TURNALLLOGGINGON
		exitfunction lin+1
	endif
	
	if ConsoleCmd$(0) = "turnallloggingoff"
		Script( slot , lin ).cmd = CMD_TURNALLLOGGINGOFF
		exitfunction lin+1
	endif
	
	if ConsoleCmd$(0) = "cameralogging"
		
		rem error
		if ConsoleCmd$(1) = ""
			AddTextToConsole( 3 , "CameraLogging expects <value>" )
			exitfunction -1
		endif
		
		rem variable support
		n = ScriptGetVariableID( slot , ConsoleCmd$(1) )
		if n > -1
			if ScriptVariableList( slot , n ).DatType <> SCRIPTDATA_INTEGER then AddTextToConsole( 3 , "Variable " + chr$(34) + ConsoleCmd$(1) + chr$(34) + " is not an integer!" ) : exitfunction -1
			n = ScriptVariableList( slot , n ).Index
		else
			n = ScriptAddDataInteger( val(ConsoleCmd$(1)) )
		endif
		
		rem create command
		Script( slot , lin ).cmd = CMD_CAMERALOGGING
		ScriptAddDataIndexToList( slot , lin , 0 , n , SCRIPTDATA_INTEGER )
		exitfunction lin+1
	endif
	
	if ConsoleCmd$(0) = "clickobjlogging"
		
		rem error
		if ConsoleCmd$(1) = ""
			AddTextToConsole( 3 , "ClickObjLogging expects <value>" )
			exitfunction -1
		endif
		
		rem variable support
		n = ScriptGetVariableID( slot , ConsoleCmd$(1) )
		if n > -1
			if ScriptVariableList( slot , n ).DatType <> SCRIPTDATA_INTEGER then AddTextToConsole( 3 , "Variable " + chr$(34) + ConsoleCmd$(1) + chr$(34) + " is not an integer!" ) : exitfunction -1
			n = ScriptVariableList( slot , n ).Index
		else
			n = ScriptAddDataInteger( val(ConsoleCmd$(1)) )
		endif
		
		rem create command
		Script( slot , lin ).cmd = CMD_CLICKOBJLOGGING
		ScriptAddDataIndexToList( slot , lin , 0 , n , SCRIPTDATA_INTEGER )
		exitfunction lin+1
	endif
	
	if ConsoleCmd$(0) = "distortionlogging"
		
		rem error
		if ConsoleCmd$(1) = ""
			AddTextToConsole( 3 , "DistortionLogging expects <value>" )
			exitfunction -1
		endif
		
		rem variable support
		n = ScriptGetVariableID( slot , ConsoleCmd$(1) )
		if n > -1
			if ScriptVariableList( slot , n ).DatType <> SCRIPTDATA_INTEGER then AddTextToConsole( 3 , "Variable " + chr$(34) + ConsoleCmd$(1) + chr$(34) + " is not an integer!" ) : exitfunction -1
			n = ScriptVariableList( slot , n ).Index
		else
			n = ScriptAddDataInteger( val(ConsoleCmd$(1)) )
		endif
		
		rem create command
		Script( slot , lin ).cmd = CMD_DISTORTIONLOGGING
		ScriptAddDataIndexToList( slot , lin , 0 , n , SCRIPTDATA_INTEGER )
		exitfunction lin+1
	endif
	
	if ConsoleCmd$(0) = "forcefieldlogging"
		
		rem error
		if ConsoleCmd$(1) = ""
			AddTextToConsole( 3 , "ForceFieldLogging expects <value>" )
			exitfunction -1
		endif
		
		rem variable support
		n = ScriptGetVariableID( slot , ConsoleCmd$(1) )
		if n > -1
			if ScriptVariableList( slot , n ).DatType <> SCRIPTDATA_INTEGER then AddTextToConsole( 3 , "Variable " + chr$(34) + ConsoleCmd$(1) + chr$(34) + " is not an integer!" ) : exitfunction -1
			n = ScriptVariableList( slot , n ).Index
		else
			n = ScriptAddDataInteger( val(ConsoleCmd$(1)) )
		endif
		
		rem create command
		Script( slot , lin ).cmd = CMD_FORCEFIELDLOGGING
		ScriptAddDataIndexToList( slot , lin , 0 , n , SCRIPTDATA_INTEGER )
		exitfunction lin+1
	endif
	
	if ConsoleCmd$(0) = "guilogging"
		
		rem error
		if ConsoleCmd$(1) = ""
			AddTextToConsole( 3 , "GUILogging expects <value>" )
			exitfunction -1
		endif
		
		rem variable support
		n = ScriptGetVariableID( slot , ConsoleCmd$(1) )
		if n > -1
			if ScriptVariableList( slot , n ).DatType <> SCRIPTDATA_INTEGER then AddTextToConsole( 3 , "Variable " + chr$(34) + ConsoleCmd$(1) + chr$(34) + " is not an integer!" ) : exitfunction -1
			n = ScriptVariableList( slot , n ).Index
		else
			n = ScriptAddDataInteger( val(ConsoleCmd$(1)) )
		endif
		
		rem create command
		Script( slot , lin ).cmd = CMD_GUILOGGING
		ScriptAddDataIndexToList( slot , lin , 0 , n , SCRIPTDATA_INTEGER )
		exitfunction lin+1
	endif
		
	if ConsoleCmd$(0) = "messagelogging"
		
		rem error
		if ConsoleCmd$(1) = ""
			AddTextToConsole( 3 , "MessageLogging expects <value>" )
			exitfunction -1
		endif
		
		rem variable support
		n = ScriptGetVariableID( slot , ConsoleCmd$(1) )
		if n > -1
			if ScriptVariableList( slot , n ).DatType <> SCRIPTDATA_INTEGER then AddTextToConsole( 3 , "Variable " + chr$(34) + ConsoleCmd$(1) + chr$(34) + " is not an integer!" ) : exitfunction -1
			n = ScriptVariableList( slot , n ).Index
		else
			n = ScriptAddDataInteger( val(ConsoleCmd$(1)) )
		endif
		
		rem create command
		Script( slot , lin ).cmd = CMD_MESSAGELOGGING
		ScriptAddDataIndexToList( slot , lin , 0 , n , SCRIPTDATA_INTEGER )
		exitfunction lin+1
	endif
	
	if ConsoleCmd$(0) = "scriptlogging"
		
		rem error
		if ConsoleCmd$(1) = ""
			AddTextToConsole( 3 , "ScriptLogging expects <value>" )
			exitfunction -1
		endif
		
		rem variable support
		n = ScriptGetVariableID( slot , ConsoleCmd$(1) )
		if n > -1
			if ScriptVariableList( slot , n ).DatType <> SCRIPTDATA_INTEGER then AddTextToConsole( 3 , "Variable " + chr$(34) + ConsoleCmd$(1) + chr$(34) + " is not an integer!" ) : exitfunction -1
			n = ScriptVariableList( slot , n ).Index
		else
			n = ScriptAddDataInteger( val(ConsoleCmd$(1)) )
		endif
		
		rem create command
		Script( slot , lin ).cmd = CMD_SCRIPTLOGGING
		ScriptAddDataIndexToList( slot , lin , 0 , n , SCRIPTDATA_INTEGER )
		exitfunction lin+1
	endif
	
	if ConsoleCmd$(0) = "triggerlogging"
		
		rem error
		if ConsoleCmd$(1) = ""
			AddTextToConsole( 3 , "TriggerLogging expects <value>" )
			exitfunction -1
		endif
		
		rem variable support
		n = ScriptGetVariableID( slot , ConsoleCmd$(1) )
		if n > -1
			if ScriptVariableList( slot , n ).DatType <> SCRIPTDATA_INTEGER then AddTextToConsole( 3 , "Variable " + chr$(34) + ConsoleCmd$(1) + chr$(34) + " is not an integer!" ) : exitfunction -1
			n = ScriptVariableList( slot , n ).Index
		else
			n = ScriptAddDataInteger( val(ConsoleCmd$(1)) )
		endif
		
		rem create command
		Script( slot , lin ).cmd = CMD_TRIGGERLOGGING
		ScriptAddDataIndexToList( slot , lin , 0 , n , SCRIPTDATA_INTEGER )
		exitfunction lin+1
	endif
	
	if ConsoleCmd$(0) = "unitlogging"
		
		rem error
		if ConsoleCmd$(1) = ""
			AddTextToConsole( 3 , "UnitLogging expects <value>" )
			exitfunction -1
		endif
		
		rem variable support
		n = ScriptGetVariableID( slot , ConsoleCmd$(1) )
		if n > -1
			if ScriptVariableList( slot , n ).DatType <> SCRIPTDATA_INTEGER then AddTextToConsole( 3 , "Variable " + chr$(34) + ConsoleCmd$(1) + chr$(34) + " is not an integer!" ) : exitfunction -1
			n = ScriptVariableList( slot , n ).Index
		else
			n = ScriptAddDataInteger( val(ConsoleCmd$(1)) )
		endif
		
		rem create commnad
		Script( slot , lin ).cmd = CMD_UNITLOGGING
		ScriptAddDataIndexToList( slot , lin , 0 , n , SCRIPTDATA_INTEGER )
		exitfunction lin+1
	endif
	
	if ConsoleCmd$(0) = "worldlogging"
		
		rem error
		if ConsoleCmd$(1) = ""
			AddTextToConsole( 3 , "WorldLogging expects <value>" )
			exitfunction -1
		endif
		
		rem variable support
		n = ScriptGetVariableID( slot , ConsoleCmd$(1) )
		if n > -1
			if ScriptVariableList( slot , n ).DatType <> SCRIPTDATA_INTEGER then AddTextToConsole( 3 , "Variable " + chr$(34) + ConsoleCmd$(1) + chr$(34) + " is not an integer!" ) : exitfunction -1
			n = ScriptVariableList( slot , n ).Index
		else
			n = ScriptAddDataInteger( val(ConsoleCmd$(1)) )
		endif
		
		rem create command
		Script( slot , lin ).cmd = CMD_WORLDLOGGING
		ScriptAddDataIndexToList( slot , lin , 0 , n , SCRIPTDATA_INTEGER )
		exitfunction lin+1
	endif

endfunction -3